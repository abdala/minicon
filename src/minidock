#!/bin/bash
#
# importcon - Imports a filesystem to a container (copying the features from other container)
# https://github.com/grycap/minicon
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

MINICON="$(which minicon)"
if [ "$MINICON" == "" ]; then
  MINICON=$(dirname $0)/minicon
fi

IMPORTCON="$(which importcon)"
if [ "$IMPORTCON" == "" ]; then
  IMPORTCON=$(dirname $0)/importcon
fi

MERGECON="$(which mergecon)"
if [ "$MERGECON" == "" ]; then
  MERGECON=$(dirname $0)/mergecon
fi

function usage() {
  cat <<EOF

minidock is a tool that gets one docker container and inspects it to create a new container whose size
  has been minimized by stripping all the files that are not needed to run it.

$0 <options> <options for minicon> [ -- <options for docker> ]

  <options for docker>      If you need them, you can include some options that will be raw-passed to the
                            docker run command used during the analysis. (i.e. minidock will execute
                            docker run <options generated> <options for docker> ...).
  <options for minicon>     If you need to, you can add some minicon-specific options. The supported options
                            are --include --exclude --execution --plugin --plugin-all
  --image | -i <image>      Name of the existing image to copy the parameters
  --tag | -t <tag>          Tag for the imported image (random if not provided)
  --no-cmd | -n             Do not analyze the command in the entrypoint and cmd from the original image
  --apt)                    Install the dependencies from minicon using apt-get commands (in the container
                            used for the simulation).
  --yum)                    Install the dependencies from minicon using yum commands (in the container used
                            for the simulation).
  --verbose | -v            Shows more information about the procedure.
  --debug                   Shows a lot more information about the procedure.
  --help | -h               Shows this help and exits.

EOF
}

function verify_dependencies() {
  if [ ! -x "$MINICON" ]; then
    finalize 1 "cannot find minicon"
  fi
  if [ ! -x "$IMPORTCON" ]; then
    finalize 1 "cannot find importcon"
  fi
  if [ ! -x "$MERGECON" ]; then
    finalize 1 "cannot find mergecon"
  fi
  if ! docker --version > /dev/null 2> /dev/null; then
    finalize 1 "docker command is needed to import the image"
  fi
  if ! jq --version > /dev/null 2> /dev/null; then
    finalize 1 "jq command is needed"
  fi
}

source lib/debug.bash
source lib/temp.bash
source lib/utils.bash
source lib/dockerutils.bash

n=0
while [ $# -gt 0 ]; do
    if [ "${1:0:1}" == "-" -a "${1:1:1}" != "-" -a "${1:1:1}" != "" ]; then
        for f in $(echo "${1:1}" | sed 's/\(.\)/-\1 /g' ); do
            ARR[$n]="$f"
            n=$(($n+1))
        done
    else
        ARR[$n]="$1"
        n=$(($n+1))
    fi
    shift
done

TMPDIR=
OUTFILE=
n=0
MINICONOPTS=()
IMPORTCONOPTS=()
DOCKEROPTS=()

while [ $n -lt ${#ARR[@]} ]; do
    PARAM="${ARR[$n]}"
    case "$PARAM" in
        --no-cmd|-n)            NOEXECUTECMD=true;;
        --apt)                  DEPENDENCIES_APT=true;;
        --yum)                  DEPENDENCIES_YUM=true;;
        --plugin-all)           DOCKEROPTS+=("--privileged")
                                MINICONOPTS+=("$PARAM");;
        --plugin=*)             PLUGIN_ID=${PARAM:9}
                                PLUGIN_ID=${PLUGIN_ID%:*}
                                if [ "$PLUGIN_ID" == "strace" ]; then
                                  p_debug "adding --privileged flag because strace needs it"
                                  DOCKEROPTS+=("--privileged")
                                fi
                                MINICONOPTS+=("$PARAM");;
        --exclude|-e|--execution|-E|--include|-I)
                                MINICONOPTS+=("$PARAM")
                                n=$(($n+1))
                                MINICONOPTS+=("${ARR[$n]}");;
        --second|-2)            n=$(($n+1))
                                SECONDIMAGE="${ARR[$n]}";;
        --image|-i)             n=$(($n+1))
                                FROMIMAGE="${ARR[$n]}";;
        --tag|-t)               n=$(($n+1))
                                NEWNAME="${ARR[$n]}";;
        --simulate|-s)          SIMULATEONLY=true;;
        --verbose|-v)           MINICONOPTS+=("--verbose")
                                IMPORTCONOPTS+=("--verbose")
                                VERBOSE=true;;
        --debug)                MINICONOPTS+=("--debug")
                                IMPORTCONOPTS+=("--debug")
                                DEBUG=true;;
        --help | -h)            usage && finalize;;
        --keeptemporary|-k)     KEEPTEMPORARY="true";;
        --)                     n=$(($n+1))
                                while [ $n -lt ${#ARR[@]} ]; do
                                  DOCKEROPTS+=("${ARR[$n]}")
                                  n=$(($n+1))
                                done;;
        *)                      usage && finalize 1 "invalid parameter $PARAM"
    esac
    n=$(($n+1))
done

verify_dependencies

CMDLINE_EP=($(get_config_field "$FROMIMAGE" "Entrypoint"))
CMDLINE_CMD=($(get_config_field "$FROMIMAGE" "Cmd"))

if [ "$CMDLINE_EP" == "null" ]; then
  CMDLINE_EP=()
else
  p_debug "found Entrypoint: ${CMDLINE_EP[@]}"
fi

if [ "$CMDLINE_CMD" == "null" ]; then
  CMDLINE_CMD=()
else
  p_debug "found Cmd: ${CMDLINE_CMD[@]}"
fi

CMDLINE=()
CMDLINE+=("${CMDLINE_EP[@]}")
CMDLINE+=("${CMDLINE_CMD[@]}")

# Two-steps are needed because of array expansion
CMDLINE="${CMDLINE[@]}"
CMDLINE="$(trim "$CMDLINE")"

TMPDIR=$(tempdir)
REMOTEMINICON="/bin/minicon"
MINICONFOLDER="-v $(readlink -e $MINICON):$REMOTEMINICON"
REMOTEWORKING="/minicon/work"
WORKINGFOLDER="-v $TMPDIR:$REMOTEWORKING"

p_info "minimizing container using minicon"

DEPENDENCIES=
if [ "$DEPENDENCIES_APT" == "true" ]; then
  if [ "$DEBUG" == "true" ]; then
    DEPENDENCIES="$(build_cmdline apt-get -y update \&\& apt-get -y install bash libc-bin tar rsync file strace \&\&)"
  else
    DEPENDENCIES="$(build_cmdline apt-get -y update \> /dev/null 2\> /dev/null \&\& apt-get -y install bash libc-bin tar rsync file strace \> /dev/null 2\> /dev/null \&\&)"
  fi
else
  DEPENDENCIES="$(build_cmdline yum install -y install bash tar rsync file strace which \&\&)"
fi

if [ "$NOEXECUTECMD" == "true" ]; then
  if [ "$CMDLINE" != "" ]; then
    p_info "not executing the default command in the container due to commandline options"
  fi
else
  if [ "$CMDLINE" != "" ]; then
    MINICONOPTS+=("-E")
    MINICONOPTS+=("$CMDLINE")
  fi
fi

p_debug docker run --rm -it $MINICONFOLDER $WORKINGFOLDER --entrypoint "" "${DOCKEROPTS[@]}" "$FROMIMAGE" \
  sh -c "${DEPENDENCIES}$(build_cmdline "$REMOTEMINICON" "-t" "$REMOTEWORKING/image.tar" "${MINICONOPTS[@]}")"

docker run --rm -it $MINICONFOLDER $WORKINGFOLDER --entrypoint "" "${DOCKEROPTS[@]}" "$FROMIMAGE" \
  sh -c "${DEPENDENCIES}$(build_cmdline "$REMOTEMINICON" "-t" "$REMOTEWORKING/image.tar" "${MINICONOPTS[@]}")"

if [ $? -ne 0 ]; then
  finalize 1 "failed to run minicon"
fi

IMPORTCONOPTS="${IMPORTCONOPTS[@]}"
$IMPORTCON $IMPORTCONOPTS -i "$FROMIMAGE" -t "$NEWNAME" -A $TMPDIR/image.tar

if [ $? -ne 0 ]; then
  finalize 1 "failed to run importcon"
fi

#if [ "$SECONDIMAGE" != "" ]; then
#  p_info "merging with container $SECONDIMAGE using mergecon"
#fi


finalize