#!/bin/bash
#
# minicon - Minimization of filesystems for containers
# https://github.com/grycap/minicon
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

function usage() {
  cat <<EOF

minicon aims at reducing the footprint of the filesystem for the container, just adding those 
  files that are needed. That means that the other files in the original container are removed.

$0 <option> -- <main execution>

  --rootfs | -r       Create the filesystem in a specific folder.
  --tar-file | -t     Generate a tar file that contains the resulting filesystem. This is
                      ideal to import it into docker using the command "docker import". If 
                      not specified the --rootfs parameter, minicon will use a temporary 
                      folder.
  --exclude | -e <F>  Exclude all paths that begin with 'F' (it accepts texts for regular 
                      expressions). The files are excluded from the final filesystem, but if 
                      an execution depends on an app in any of these paths, it will be executed 
                      anyway (e.g. -E '/tmp/myapp' -e '/tmp' will analyze myapp, but will not be
                      appear in the final filesystem).
  --no-exclude-common | -C
                      The default behavior of minicon is to exclude /tmp, /proc and /dev. If you
                      do not want to exclude them, you should include this flag. The only excluded 
                      folders will be those included in the commandline.
  --include | -I <F>  Force to consider the file (or folder) pointed by 'F'. Take into account that
                      --include has priority over --exclude.
  --execution | -E <cmdline>
                      Executions to analyze, appart from the main execution (you can include a 
                      whole execution with parameters between quotes). It can appear as many time
                      as executions are needed.
                      This is specially useful for the strace plugin. In other case, the effect 
                      will be the same of including the command from the execution in the executables 
                      to analyze. The executions will be made in order of appearance, AFTER the 
                      main execution.
  --no-ldconfig | -L  Do not generate the /etc/ldconfig.so file, adjusted to the new filesystem. 
                      It is suggested to always use this flag, to set the proper path to the
                      libraries included in the new filesystem.
  --ldconfig | -l     (deprecated) generate the /etc/ldconfig.so file, adjusted to the new 
                      filesystem. This is deprecated because now it is the default behavior if 
                      flag -L is not used.
  --plugin            Activates some plugins and sets the options for them. The syntax is
                      --plugin=<plugin name>:<parameter>=<value>:<parameter>=<value>...
  --plugin-all        Activates all the available plugins, using their default options.
  --logfile | -g <F>  Outputs the information in file F instead of stdout and stderr
  --quiet | -q        Makes the tasks silently
  --version | -V      Shows the version number and finalizes.
  --verbose | -v      Shows more information about the procedure.
  --debug             Shows a lot more information about the procedure.
  --help | -h         Shows this help and exits.

EOF
}

# Checking dependencies
function remove_from_plugins() {
  local P="$1"
  local PP=

  while [ "$PP" != "$PLUGINS_ACTIVATED" ]; do
    PP="$PLUGINS_ACTIVATED"
    PLUGINS_ACTIVATED="$(echo "$PLUGINS_ACTIVATED" | sed "s/\(^\|,\)\($P\(\|:[^,]*\)\)\(,\|$\)/\1\4/g")"
  done
}

function verify_dependencies() {
  if ! strace -V > /dev/null 2> /dev/null; then
    remove_from_plugins "strace"
    p_warning "disabling strace plugin because strace command is not available"
  fi
  if ! file --version > /dev/null 2> /dev/null; then
    remove_from_plugins "scripts"
    p_warning "disabling scripts plugin because file command is not available"
  fi
  if [ "$TARFILE" != "" ]; then
    if ! tar --version > /dev/null 2> /dev/null; then
      finalize 1 "tar command is needed to create tar files"
    fi
  fi
  if ! ldd --version > /dev/null 2> /dev/null; then
    finalize 1 "ldd command is needed for scripts plugin"
  fi
}

_MUTED_EXPRESSIONS=()

function p_mute() {
  _MUTED_EXPRESSIONS+=("${1// /[[:space:]]}")
}

function p_errfile() {
  local i
  local E
  for ((i=0;i<${#_MUTED_EXPRESSIONS[@]};i=i+1)); do
    E="${_MUTED_EXPRESSIONS[$i]}"
    if [[ "$1" =~ ^$E ]]; then
      return 0
    fi
  done

  if [ "$LOGFILE" == "" ]; then
    echo "$@" >&2
  else
    touch -f "$LOGFILE"
    if [ $? -eq 0 ]; then
      echo "$@" >> "$LOGFILE"
    fi
  fi
}

function p_error() {
  local O_STR="[ERROR] $LOGGER $(date +%Y.%m.%d-%X) $@"
  p_errfile "$O_STR"
}

function p_warning() {
  local O_STR="[WARNING] $LOGGER $(date +%Y.%m.%d-%X) $@"
  p_errfile "$O_STR"
}

function p_info() {
  local L
  if [ "$VERBOSE" == "true" ]; then
    local TS="$(date +%Y.%m.%d-%X)"
    while read L; do
      p_errfile "[INFO] $LOGGER $TS $@"
    done <<< "$@"
  fi
}

function p_out() {
  if [ "$QUIET" != "true" ]; then
    while read L; do
      echo "$@"
    done <<< "$@"
  fi
}

function p_debug() {
  local L
  if [ "$DEBUG" == "true" ]; then
    local TS="$(date +%Y.%m.%d-%X)"
    while read L; do
      p_errfile "[DEBUG] $LOGGER $TS $L"
    done <<< "$@"
  fi
}

function set_logger() {
  if [ "$1" != "" ]; then
    LOGGER="[$1]"
  else
    LOGGER=
  fi
}

_OLD_LOGGER=

function push_logger() {
  _OLD_LOGGER="$LOGGER"
  LOGGER="$LOGGER[$1]"
}

function pop_logger() {
  LOGGER="$_OLD_LOGGER"
}

function finalize() {
  # Finalizes the execution of the this script and shows an error (if provided)
  local ERR=$1
  shift
  local COMMENT=$@
  [ "$ERR" == "" ] && ERR=0
  [ "$COMMENT" != "" ] && p_error "$COMMENT"
  if [ "$KEEPTEMPORARY" != "true" ]; then
    p_debug removing temporary folder "$TMPDIR"
    rm -rf "$TMPDIR"
  fi  
  exit $ERR
}
function tempfile {
  local FOLDER="$1"
  if [ "$FOLDER" == "" ]; then
    FOLDER=/tmp
  fi
  if [ ! -d "$FOLDER" ]; then
    finalize 1 "folder $FOLDER does not exist"
  fi
  RES=$FOLDER/ftemp_${RANDOM}_$(date +%s)
  touch $RES
  while [ $? -ne 0 ]; do
    RES=$FOLDER/ftemp_${RANDOM}_$(date +%s)
    touch $RES
  done
  echo $RES
}

function tempdir() {
  # Creates a unique temporary folder
  local FOLDER="$1"
  if [ "$FOLDER" == "" ]; then
    FOLDER=/tmp
  fi
  if [ ! -d "$FOLDER" ]; then
    finalize 1 "folder $FOLDER does not exist"
  fi
  RES=$FOLDER/ftemp_${RANDOM}_$(date +%s)
  mkdir -p $RES 2> /dev/null
  while [ $? -ne 0 ]; do
    RES=$FOLDER/ftemp_${RANDOM}_$(date +%s)
    mkdir -p $RES 2> /dev/null
  done
  echo $RES
}
# Reads a configuration file and set its variables (removes comments, blank lines, trailing spaces, etc. and
# then reads KEY=VALUE settings)
function readconf() {
  local _CONF_FILE=$1
  local _CURRENT_SECTION
  local _TXT_CONF
  local _CURRENT_KEY _CURRENT_VALUE

  # If the config file does not exist return failure
  if [ ! -e "$_CONF_FILE" ]; then
    return 1
  fi

  # First we read the config file
  _TXT_CONF="$(cat "$_CONF_FILE" | sed 's/#.*//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g' | sed '/^$/d')"

  # Let's read the lines
  while read L; do
    if [[ "$L" =~ ^\[.*\]$ ]]; then
      # If we are reading a section, let's see if it is applicable to us
      _CURRENT_SECTION="${L:1:-1}"
    else
      IFS='=' read _CURRENT_KEY _CURRENT_VALUE <<< "$L"
      _CURRENT_VALUE="$(echo "$_CURRENT_VALUE" | envsubst)"
      read -d '\0' "$_CURRENT_KEY" <<< "${_CURRENT_VALUE}"
    fi
  done <<< "$_TXT_CONF"
  return 0
}
function trim() {
  shopt -s extglob
  local A="${1##+([[:space:]])}"
  A="${A%%+([[:space:]])}"
  shopt -u extglob
  echo "$A"
}

function build_cmdline() {
  local SHCMDLINE=""
  while [ $# -gt 0 ]; do
    if [ "$1" == "&&" -o "$1" == ">" -o "$1" == ">>" -o "$1" == "2>" -o "$1" == "2>>" -o "$1" == "<" -o "$1" == "<<" ]; then
      SHCMDLINE="${SHCMDLINE} $1"
    else
      SHCMDLINE="${SHCMDLINE} \"$1\""
    fi
    shift
  done
  echo "$SHCMDLINE"
}

function arrayze_cmd() {
  # This function creates an array of parameters from a commandline. The special
  # function of this function is that sometimes parameters are between quotes and the
  # common space-separation is not valid. This funcion solves the problem of quotes and
  # then a commandline can be invoked as "${ARRAY[@]}"
  local AN="$1"
  local _CMD="$2"
  local R n=0
  while read R; do
    read ${AN}[n] <<< "$R"
    n=$((n+1))
  done < <(printf "%s\n" "$_CMD" | xargs -n 1 printf "%s\n")
}
function plugin_parameter() {
  # Gets the value of a parameter passed to a plugin
  #   the format is: <plugin>:<param1>=<value1>:<param2>=<value2>...
  local PLUGIN="$1"
  local PARAMETER="$2"
  local PARAMS PP PP2 K V

  while read -d ',' PP; do
    if [[ "$PP" =~ ^$PLUGIN\: ]]; then
      PARAMS="${PP:$((${#PLUGIN}+1))}"
      while read -d ':' PP2; do
        IFS='=' read K V <<< "$PP2"
        if [ "$K" == "$PARAMETER" ]; then
          p_debug "found param $K with value $V"
          echo "$V"
          return 0
        fi
      done <<< "${PARAMS}:"
    fi
  done <<< "${PLUGINS_ACTIVATED},"
  return 1
}

function buildpaths() {
  local S_PATH="$1"
  local L_PATH="$S_PATH"
  local C_PATH="$S_PATH"

  while [ "$C_PATH" != "/" -a "$C_PATH" != "." -a "$C_PATH" != ".." ]; do
    C_PATH="$(dirname "$C_PATH")"
    L_PATH="$C_PATH
$L_PATH"
  done
  echo "$L_PATH"
}

function checklinks() {
  local L_PATH="$1"
  local C_PATH
  local D_PATH
  local FOUND
  while read C_PATH; do
    if [ "$C_PATH" != "" -a "$C_PATH" != "." -a "$C_PATH" != ".." -a -h "$C_PATH" ]; then
      D_PATH="$(readlink "$C_PATH")"
      if [ "${D_PATH:0:1}" != "/" ]; then
        D_PATH="$(dirname "${C_PATH}")/${D_PATH}"
      fi
      D_PATH="$(realpath -Ls "$D_PATH")"
      FOUND=true
      break
    fi
  done <<< "$L_PATH"
  if [ "$FOUND" == "true" ]; then
    local F_PATH="$(echo "$L_PATH" | tail -n 1)"
    local N_PATH="${#C_PATH}"
    N_PATH="${D_PATH}${F_PATH:$N_PATH}"
    echo "$F_PATH:$C_PATH:$D_PATH:$N_PATH"
  fi
}

function _linked_file() {
  local L_PATH="$1"
  local L_PATHS
  local RES
  local C_FILE="$L_PATH"
  local FINAL_FILE="$L_PATH"

  # Special cases that we do not want to handle
  if [ "$L_PATH" == "." -o "$L_PATH" == ".." ]; then
    echo "$L_PATH"
    return
  fi

  while [ "$C_FILE" != "" ]; do
    L_PATHS="$(buildpaths "$C_FILE")"
    RES="$(checklinks "$L_PATHS")"
    if [ "$RES" != "" ]; then
      local SRC DST L_ORIG L_DST
      IFS=':' read SRC L_ORIG L_DST DST <<< "${RES}:"
      p_debug "$L_ORIG -> $L_DST"
      L_DST="$(relPath "$(dirname $L_ORIG)" "$L_DST")"
      
      local EFF_FILE="$ROOTFS/$L_ORIG"
      mkdir -p "$(dirname "$EFF_FILE")"
      ln -s "$L_DST" "$EFF_FILE" 2> /dev/null
      C_FILE="$DST"
    else
      FINAL_FILE="$C_FILE"
      C_FILE=
    fi
  done
  echo "$FINAL_FILE"
}

function PLUGIN_00_link() {
  # If the path is a link to other path, we will create the link and analyze the real path
  local L_PATH="$1"

  local L_PATH="$(_linked_file "$1")"
  if [ "$L_PATH" != "$1" ]; then
    add_command "$L_PATH"
    return 1
  fi
  return 0
}

function PLUGIN_01_which() {
  # This plugin tries to guess whether the command to analize is in the path or not.
  # If the command can be obtained calling which, we'll analyze the actual command and not the short name.
  local S_PATH="$1"
  local W_PATH="$(which $S_PATH)"

  if [ "$W_PATH" != "" -a "$W_PATH" != "$S_PATH" ]; then
    p_debug "$1 is $W_PATH"
    add_command "$W_PATH"
    return 1
  fi
}

function PLUGIN_02_folder() {
  # If it is a folder, just copy it to its location in the new FS
  local S_PATH="$1"

  if [ -d "$S_PATH" ]; then
    p_debug "copying the whole folder $S_PATH"
    copy "$S_PATH" -r
    return 1
  fi

  return 0
}

function PLUGIN_09_ldd() {
  # Checks the list of dynamic libraries using ldd and copy them to the proper folder
  local S_PATH="$1"
  local LIBS= LIB=
  local COMMAND="$(which -- $S_PATH)"
  local LIB_DIR=
  if [ "$COMMAND" == "" ]; then
    COMMAND="$S_PATH"
  fi

  COMMAND="$(readlink -e $COMMAND)"
  if [ "$COMMAND" == "" ]; then
    p_debug "cannot analize $S_PATH using ldd"
    return 0
  fi

  p_info "inspect command $COMMAND"
  ldd "$COMMAND" > /dev/null 2> /dev/null
  if [ $? -eq 0 ]; then
    LIBS="$(ldd "$COMMAND" | grep -v 'linux-vdso' | grep -v 'statically' | sed 's/^[ \t]*//g' | sed 's/^.* => //g' | sed 's/(.*)//' | sed '/^[ ]*$/d')"
    for LIB in $LIBS; do
      # Here we build the ld config file to add the new paths where the libraries are located
      if [ "$LDCONFIGFILE" != "" ]; then
        LIB_DIR="$(dirname "$LIB")"
        mkdir -p "$ROOTFS/$(dirname $LDCONFIGFILE)"
        echo "$LIB_DIR" >> "$ROOTFS/$LDCONFIGFILE"
      fi
      add_command "$LIB"
    done
  fi

  copy "$COMMAND"
}

function analyze_strace_strings() {
  local STRINGS="$1"
  local S _S
  while read S; do
    S="${S:1:-1}"
    if [ "$S" != "!" ]; then
      if [ "$S" != "" -a "${S::1}" != "-" -a -e "$S" ]; then
        _S="$(readlink -e -- ${S})"
        if [ "$_S" != "" -a -e "$_S" ]; then
          if [ -f "$_S" -o -d "$_S" ]; then
            p_debug "file $S was used"
            echo "$S"
          fi
        fi
      fi
    fi
  done <<< "$STRINGS"
}

_ALREADY_STRACED=()

function MARK_straced() {
  local CMD="$@"
  _ALREADY_STRACED+=("$CMD")
}

function already_straced() {
  local i
  local CMD="$@"
  for ((i=0;i<${#_ALREADY_STRACED[@]};i=i+1)); do
    if [ "${_ALREADY_STRACED[$i]}" == "$CMD" ]; then
      return 0
    fi
  done
  return 1
}

function _strace_mode() {
  local MODE="$(plugin_parameter "strace" "mode")"
  local ERR=0
  case "$MODE" in
    loose|regular|slim|skinny|default) 
        ;;
    "") MODE=default;;
    *)  p_error "invalid mode '$MODE' for strace"
        MODE=
        ERR=1;;
  esac
  if [ "$MODE" == "default" ]; then
    MODE=skinny
  fi
  echo "$MODE"
  return $ERR
}

function _strace_copy_folder() {
  local _FILE="$1"
  local _STRACE_EXCLUDED_PATHS='
^//$
^\./$
^\.\./$
^/tmp/$
^/boot/$
^/home/$
^/sys/
^/usr/lib(32|64|)/
^/lib(32|64|)/
^/etc/$
^/var/$
^/proc/$
^/dev/$
^/usr/$
^/bin/$
^/usr/bin/$
^/sbin/$
^/usr/sbin/$
'

  local DN
  if [ -f "$_FILE" ]; then
    DN="$(dirname "$_FILE")/"
  else
    DN="$(realpath -Lsm "$_FILE")/"
  fi

  if [ ! -d "$DN" ]; then
    return 1
  fi

  while read EP; do
    if [ "$EP" != "" ]; then
      if [[ "$DN" =~ $EP ]]; then
        p_debug "excluding ${DN} because it matches pattern ${EP}"
        return 0
      fi
    fi
  done <<< "$_STRACE_EXCLUDED_PATHS"

  p_debug "copying $DN because $_FILE is in it"
  copy "$DN" -r
  return 0
}

function _strace_exec() {  

  if already_straced "${COMMAND[@]}"; then
    p_debug "command ${COMMAND[@]} already straced"
    return
  fi

  MARK_straced "${COMMAND[@]}"

  # Execute the app without any parameter, using strace and see which files does it open 
  local SECONDSSIM=$(plugin_parameter "strace" "seconds")
  if [[ ! $SECONDSSIM =~ ^[0-9]*$ ]]; then
    SECONDSSIM=3
  fi
  if [ "$SECONDSSIM" == "" ]; then
    SECONDSSIM=3
  fi

  local MODE
  MODE="$(_strace_mode)"

  if [ $? -ne 0 ]; then
    finalize 1 "error in strace parameter"
  fi

  p_info "analysing ${COMMAND[@]} using strace and $SECONDSSIM seconds ($MODE)"

  local TMPFILE=$(tempfile)
  {
    timeout -s 9 $SECONDSSIM strace -qq -e file -fF -o "$TMPFILE" "${COMMAND[@]}" > /dev/null 2> /dev/null
  } > /dev/null 2> /dev/null

  # Now we'll inspect the files that the execution has used
  local EXEC_FUNCTIONS="exec.*"
  local STRINGS
  local L BN DN

  # Add all the folders and files that are used, but analyze libraries or executable files
  #FUNCTIONS="open|mkdir"
  #STRINGS="$(cat "$TMPFILE" | grep -E "($FUNCTIONS)\(" | grep -o '"[^"]*"' | sort -u)"  
  #while read L; do
  #  if [ "$L" != "" ]; then
  #    BN="$(basename $L)"
  #    if [ "${BN::3}" == "lib" -o "${BN: -3}" == ".so" ]; then
  #      add_command "$L"
  #    else
  #      copy "$L" -r
  #    fi
  #  fi
  #done <<< "$(analyze_strace_strings "$STRINGS")"

  # Add all the folders and files that checked to exist (folders are not copied, just may
  # appear in the resulting filesystem, but libraries are analyzed)
  # FUNCTIONS="stat|lstat"

  push_logger "PLAIN"
  STRINGS="$(cat "$TMPFILE" | grep -vE "($EXEC_FUNCTIONS)\(" | grep -o '"[^"]*"' | sort -u)"  
  while read L; do
    if [ "$L" != "" -a "$L" != "/" -a "$L" != "." -a "$L" != ".." ]; then
      if [ -f "$L" ]; then
        BN="$(basename $L)"
        if [ "${BN::3}" == "lib" -o "${BN: -3}" == ".so" ]; then
          add_command "$L"
        else
          copy "$L"
        fi
      else
        copy "$L"
      fi
    fi
  done <<< "$(analyze_strace_strings "$STRINGS")"
  pop_logger

  # If the mode is slim, we'll also copy the whole opened (or created) folders
  if [ "$MODE" == "slim" -o "$MODE" == "regular" -o "$MODE" == "loose" ]; then
    push_logger "OPENDIRS"
    local FUNCTIONS="open|mkdir"
    STRINGS="$(cat "$TMPFILE" | grep -E "($FUNCTIONS)\(" | grep -o '"[^"]*"' | sort -u)"  
    while read L; do
      if [ "$L" != "" ]; then
        if [ -d "$L" ]; then
          copy "$L" -r
        fi
      fi
    done <<< "$(analyze_strace_strings "$STRINGS")"
    pop_logger
  fi

  # If the mode is regular, we'll copy the whole folders used
  if [ "$MODE" == "loose" ]; then
    push_logger "COPYDIRS"
    STRINGS="$(cat "$TMPFILE" | grep -vE "($EXEC_FUNCTIONS)\(" | grep -o '"[^"]*"' | sort -u)"  
    while read L; do
      if [ "$L" != "" ]; then
        if [ -d "$L" ]; then
          _strace_copy_folder "$L"
          # copy "$L" -r
        fi
      fi
    done <<< "$(analyze_strace_strings "$STRINGS")"
    pop_logger
  fi

  # If the mode is slim, we'll also copy the whole opened (or created) folders
  if [ "$MODE" == "regular" -o "$MODE" == "loose" ]; then
    push_logger "DIRSFROMFILES"
    local FUNCTIONS="open"
    STRINGS="$(cat "$TMPFILE" | grep -E "($FUNCTIONS)\(" | grep -o '"[^"]*"' | sort -u)"  
    while read L; do
      if [ "$L" != "" ]; then
        _strace_copy_folder "$L"
      fi
    done <<< "$(analyze_strace_strings "$STRINGS")"
    pop_logger
  fi

  # Add all the executables that have been executed (they are analyzed).
  # FUNCTIONS="exec.*"

  push_logger "EXEC"  
  STRINGS="$(cat "$TMPFILE" | grep -E "($EXEC_FUNCTIONS)\(" | grep -o '"[^"]*"' | sort -u)"  
  while read L; do
    [ "$L" != "" ] && add_command "$L"
  done <<< "$(analyze_strace_strings "$STRINGS")"
  pop_logger

  rm "$TMPFILE"

  copy "${COMMAND[0]}"
}

function PLUGIN_10_strace() {
  # Execute the app without any parameter, using strace and see which files does it open 

  # A file that contains examples of calls for the commands to be considered (e.g. this is because
  # some commands will not perform any operation if they do not have parameters; e.g. echo)
  local EXECFILE=$(plugin_parameter "strace" "execfile")

  local S_PATH="$1"
  local COMMAND="$(which -- $S_PATH)"
  if [ "$COMMAND" == "" ]; then
    p_debug "cannot analize $S_PATH using strace"
    return 0
  fi

  # Let's see if there is a specific commandline (with parameters) for this command in the file
  local CMDTOEXEC CMDLINE=()
  if [ -e "$EXECFILE" ]; then
    local L 
    while read L; do
      CMDTOEXEC=
      arrayze_cmd CMDLINE "$L"
      n=0
      while [ $n -lt ${#CMDLINE[@]} ]; do
        if [ "${CMDLINE[$n]}" == "$COMMAND" ]; then
          CMDTOEXEC="$L"
          break
        fi
        n=$((n+1))
      done
      if [ "$CMDTOEXEC" != "" ]; then
        break
      fi
    done < "$EXECFILE"
  fi

  COMMAND=($COMMAND)

  # If there is a specific commandline, we'll use it; otherwise we'll run the command as-is
  if [ "$CMDTOEXEC" != "" ]; then
    p_debug "will run $CMDTOEXEC"
    COMMAND=( ${CMDLINE[@]} )
  fi

  _strace_exec
}

function STRACE_command() {
  local CMDLINE=()
  local COMMAND

  push_logger "STRACE"

  arrayze_cmd CMDLINE "$1"
  local _PLUGINS_ACTIVATED="${PLUGINS_ACTIVATED}"

  if [ "${CMDLINE[0]}" != "" ]; then
    local S_PATH="${CMDLINE[0]}"
    local OPTIONS="${S_PATH%,*}"
    local N_PATH="${S_PATH##*,}"

    if [ "$N_PATH" != "" -a "$OPTIONS" != "" ]; then
      # Remove the possible leading spaces before the options
      OPTIONS="$(trim "$OPTIONS")"
      p_info "specific options to strace: $OPTIONS"
      PLUGINS_ACTIVATED="${PLUGINS_ACTIVATED},strace:${OPTIONS}"
      S_PATH="$N_PATH"
    fi

    COMMAND="$(which -- $S_PATH)"
    if [ "$COMMAND" == "" ]; then
      p_debug "cannot analize $S_PATH using strace"
      pop_logger
      return 0
    fi
    CMDLINE[0]="$COMMAND"
  fi
  COMMAND=( ${CMDLINE[@]} )
  _strace_exec

  PLUGINS_ACTIVATED="${_PLUGINS_ACTIVATED}"

  pop_logger
}

function PLUGIN_11_scripts() {
  # Checks the output of the invocation to the "file" command and guess whether it is a interpreted script or not
  #  If it is, adds the interpreter to the list of commands to add to the container
  p_debug "trying to guess if $1 is a interpreted script"

  local S_PATH="$(which $1)"
  local ADD_PATHS=

  if [ "$S_PATH" == "" -o ! -x "$S_PATH" ]; then
    p_debug "$1 cannot be executed (if it should, please check the path)"
    return 0
  fi

  local FILE_RES="$(file $S_PATH | grep -o ':.* script')"
  if [ "$FILE_RES" == "" ]; then
    p_debug "$S_PATH is not recognised as a executable script"
    return 0
  fi

  FILE_RES="${FILE_RES:2:-7}"
  FILE_RES="${FILE_RES,,}"
  local SHELL_EXEC=
  local SHBANG_LINE=$(cat $S_PATH | sed '/^#!.*/q' | tail -n 1 | sed 's/^#![ ]*//')
  local INTERPRETER="${SHBANG_LINE%% *}"
  ADD_PATHS="$INTERPRETER"
  local ENV_APP=
  if [ "$(basename $INTERPRETER)" == "env" ]; then
    ADD_PATHS="$INTERPRETER"
    ENV_APP="${SHBANG_LINE#* }" # This is in case there are parameters for the interpreter e.g. #!/usr/bin/env bash -c
    ENV_APP="${ENV_APP%% *}"
    local W_ENV_APP="$(which "$ENV_APP")"
    if [ "$W_ENV_APP" != "" ]; then
      ENV_APP="$W_ENV_APP"
    fi
  fi

  case "$(basename "$INTERPRETER")" in
    perl) ADD_PATHS="${ADD_PATHS}
$(perl -e "print qq(@INC)" | tr ' ' '\n' | grep -v -e '^/home' -e '^\.')";;
    python) ADD_PATHS="${ADD_PATHS}
$(python -c 'import sys;print "\n".join(sys.path)' | grep -v -e '^/home' -e '^\.')";;
    bash) ;;
    sh) ;;
    env)  ADD_PATHS="${ADD_PATHS}
${ENV_APP}";;
    *)    p_warning "interpreter $INTERPRETER not recognised"
          return 0;;
  esac

  if [ "$ADD_PATHS" != "" ]; then
    p_debug "found that $S_PATH needs $ADD_PATHS"
    local P
    while read P; do
      [ "$P" != "" ] && add_command "$P"
    done <<< "$ADD_PATHS"
  fi
  return 0
}

function PLUGIN_funcs() {
  # Gets the list of plugins available for the app (those functions named PLUGIN_xxx_<plugin name>)
  echo "$(typeset -F | grep PLUGIN_ | awk '{print $3}' | grep -v 'PLUGIN_funcs')"
}

function plugin_list() {
  local P
  while read P; do
    echo -n "${P##*_},"
  done <<< "$(PLUGIN_funcs)"
  echo
}
VERSION=1.2-1

function is_protected() {
  local SRC="$1"
  local PROTECTED="/proc.*,/dev.*,/sys.*,/"
  local CURRENT

  while read -d ',' CURRENT; do
    CURRENT="${CURRENT}\$"
    if [[ "$SRC" =~ ^$CURRENT ]]; then
      return 0
    fi
  done <<<"${PROTECTED},"
  return 1
}

function _build_rsync() {
  local CURRENT="$1"
  local RES=
  while [ "$CURRENT" != "/" -a "$CURRENT" != "." -a "$CURRENT" != ".." ]; do
    RES="--include ${CURRENT} ${RES}"
    CURRENT="$(dirname "$CURRENT")"
  done
  local i
  for ((i=0;i<${#EXCLUDED_PATHS[@]};i=i+1)); do
    RES="${RES} --exclude ${EXCLUDED_PATHS[$i]} --exclude ${EXCLUDED_PATHS[$i]}/\*"
  done
  echo "$RES"
}

function cp_rsync() {
  local SRC="$1"
  local ROOTFS="$2"
  local RECURSE="$3"

  if [ "${SRC:0:2}" == "./" ]; then
    SRC="${PWD}${SRC:1}"
  fi

  local SRCDIR="$(dirname "$SRC")"
  DST="$ROOTFS/$SRCDIR"

  p_out "$SRC"
  if [ "$RECURSE" == "true" ]; then
    p_debug "copying $SRC to $DST (recurse)"
    rsync -a $(_build_rsync "$SRCDIR") --include "${SRC}" --include "${SRC}/**" --exclude '*' / "$ROOTFS"
  else
    p_debug "copying $SRC to $DST"
    rsync -a $(_build_rsync "$SRCDIR") --include "${SRC}" --exclude '*' / "$ROOTFS"
  fi
}

function cp_cp() {
  local SRC="$1"
  local ROOTFS="$2"
  local RECURSE="$3"

  if [ "${SRC:0:2}" == "./" ]; then
    SRC="${PWD}${SRC:1}"
  fi
  
  local DST=
  DST="$ROOTFS/$(dirname "$SRC")"
  mkdir -p "$DST"
  
  p_out "$SRC"
  if [ -d "$SRC" ]; then
    if [ "$RECURSE" == "true" ]; then
      p_debug "copying $SRC to $DST (recurse)"
      cp -p -n -r "$SRC" "$DST"
    else
      p_debug "copying $SRC to $DST (mkdir)"
      mkdir -p "${DST}/$(basename "$SRC")"
    fi
  else
    p_debug "copying $SRC to $DST"
    cp -p -n "$SRC" "$DST"
  fi
}

_FILES_COPIED=""

function cp_wrapper() {
  if [ "$CP_FUNC" == "" ]; then
    rsync --version 2> /dev/null > /dev/null
    if [ $? -eq 0 ]; then
      CP_FUNC=cp_rsync
    else
      p_warning "rsync is not available... some file permissions will be lost"
      CP_FUNC=cp_cp
    fi
  fi

  local SRC ROOTFS RECURSE=false
  while [ $# -gt 0 ]; do
    case "$1" in
      -r) RECURSE=true;;
      *)  if [ "$SRC" == "" ]; then
            SRC="$1"
          else 
            if [ "$ROOTFS" == "" ]; then
              ROOTFS="$1"
            fi
          fi;;
    esac
    shift
  done
  
  local EXISTING
  EXISTING="$(echo "$_FILES_COPIED" | grep "^[tf]:${SRC}$")"
  local METHOD="${EXISTING:0:1}"
  EXISTING="${EXISTING:2}"
  if [ "$EXISTING" == "$SRC" -a "${METHOD}" == "${RECURSE:0:1}" ]; then
    p_debug "skipping file $SRC because it has been already copied"
    return
  fi

  $CP_FUNC "$SRC" "$ROOTFS" "$RECURSE"
  _FILES_COPIED="${_FILES_COPIED}
${RECURSE:0:1}:${SRC}"
}

function copy() {
  # copies one file (or folder) to the same destination in the root filesystem
  # - it does not overwrite contents
  local SRC="$1"
  local RECURSE="$2"
  if [ "$RECURSE" != "-r" ]; then
    RECURSE=
  fi

  local n EP

  # now check whether it is a link or not... if it is a link, we'll copy the actual file and will create the link
  SRC="$(_linked_file "$SRC")"

  if is_protected "$SRC"; then
    p_info "excluding file $SRC because it is in a protected path"
    return 0
  fi

  local ALREADY_INCLUDED=false

  for ((n=0;n<${#INCLUDED_PATHS[@]};n++)); do
    EP="${INCLUDED_PATHS[$n]}"
    if [[ "$SRC" =~ ^$EP ]]; then
      p_info "including ${SRC} because it matches pattern ${EP}"
      ALREADY_INCLUDED=true
      break
    fi
  done

  if [ "$ALREADY_INCLUDED" == "false" ]; then
    for ((n=0;n<${#EXCLUDED_PATHS[@]};n++)); do
      EP="${EXCLUDED_PATHS[$n]}"
      if [[ "$SRC" =~ ^$EP ]]; then
        p_info "excluding ${SRC} because it matches pattern ${EP}"
        return 0
      fi
    done
  fi

  if [ "$SRC" == "." -o "$SRC" == ".." ]; then
    p_warning "cowardly refusing to copy folder $SRC"
    return
  fi

  local DST
  if [ "$VERBOSE" == "true" ]; then
    p_info "  processing $SRC... "
  fi
  if [ ! -e "$SRC" ]; then
    p_error 1 "failed to read $SRC"
  fi

  cp_wrapper $RECURSE "$SRC" "$ROOTFS"
}

# Credits fot this function go to https://stackoverflow.com/a/18898782
# Return relative path from canonical absolute dir path $1 to canonical
# absolute dir path $2 ($1 and/or $2 may end with one or no "/").
# Does only need POSIX shell builtins (no external command)
function relPath () {
    local common path up
    common=${1%/} path=${2%/}/
    while test "${path#"$common"/}" = "$path"; do
        common=${common%/*} up=../$up
    done
    path=$up${path#"$common"/}; path=${path%/}; printf %s "${path:-.}"
}

function is_plugin_active() {
  # Checks whether a plugin is activated or not
  if [[ "$PLUGINS_ACTIVATED" =~ (^|,)$1(|:[^,]+)(,|$) ]]; then
    return 0
  fi  
  return 1
}

function add_command() {
  local CMDTOADD="$1"
  local n=0
  local ALREADY_EXISTS=false
  while [ $n -lt ${#COMMANDS_TO_ADD[@]} ]; do
    if [ "$CMDTOADD" == "${COMMANDS_TO_ADD[$n]}" ]; then
      ALREADY_EXISTS=true
      break
    fi
    n=$((n+1))
  done
  if [ "$ALREADY_EXISTS" == "false" ]; then
    p_debug "need to analyze $CMDTOADD"
    COMMANDS_TO_ADD+=( "$CMDTOADD" )
  fi
}

# Now we are activating the basic plugins
EXCLUDED_PATHS=()
INCLUDED_PATHS=()
PLUGINS_ACTIVATED=link,which,folder,ldd,scripts
COMMANDS_TO_ADD=()
EXECUTIONS=()
FORCEFOLDER=false
ROOTFS=
n=0
while [ $# -gt 0 ]; do
    if [ "${1:0:1}" == "-" -a "${1:1:1}" != "-" -a "${1:1:1}" != "" ]; then
        for f in $(echo "${1:1}" | sed 's/\(.\)/-\1 /g' ); do
            ARR[$n]="$f"
            n=$(($n+1))
        done
    else
        ARR[$n]="$1"
        n=$(($n+1))
    fi
    shift
done

LDCONFIGFILE=/etc/ld.so.conf
MAINEXECUTION=()
n=0
while [ $n -lt ${#ARR[@]} ]; do
    PARAM="${ARR[$n]}"
    case "$PARAM" in
        --plugin-all)           PLUGINS_ACTIVATED="$(plugin_list),${PLUGINS_ACTIVATED}";;
        --plugin=*)             PLUGINS_ACTIVATED="${PLUGINS_ACTIVATED},${PARAM:9}";;
        --exclude|-e)           n=$(($n+1))
                                EXCLUDED_PATHS+=("${ARR[$n]}");;
        --no-exclude-common|-C) NOEXCLUDECOMMON=true;;
        --include|-I)           n=$(($n+1))
                                INCLUDED_PATHS+=("${ARR[$n]}");;
        --logfile|-g)           n=$(($n+1))
                                LOGFILE="${ARR[$n]}";;
        --quiet|-q)             QUIET=true;;
        --tarfile|-t)           n=$(($n+1))
                                TARFILE="${ARR[$n]}";;
        --ldconfig|-l)          LDCONFIGFILE=/etc/ld.so.conf;;
        --no-ldconfig|-L)       LDCONFIGFILE=;;
        --verbose|-v)           VERBOSE=true;;
        --debug)                DEBUG=true;;
        --force|-f)             FORCEFOLDER=true;;
        --rootfs|-r)            n=$(($n+1))
                                ROOTFS="${ARR[$n]}"
                                if [ ! -d "$(dirname $ROOTFS)" ]; then
                                  finalize 1 "invalid folder (parent folder must exist)"
                                fi;;
        --execution|-E)         n=$(($n+1))
                                EXECUTIONS+=("${ARR[$n]}");;
        --version | -V)         echo "$VERSION" && finalize;;
        --help | -h)            usage && finalize;;
        --)                     n=$(($n+1))
                                while [ $n -lt ${#ARR[@]} ]; do
                                  PARAM="${ARR[$n]}"
                                  MAINEXECUTION+=("$PARAM")
                                  n=$(($n+1))
                                done;;
        *)                      usage && finalize 1 "unexpected parameter: $PARAM";;
    esac
    n=$(($n+1))
done

[ "$QUIET" == "true" ] && DEBUG= VERBOSE=

# Exclude the common non-wanted folder (if not prevented)
if [ "$NOEXCLUDECOMMON" != "true" ]; then
  EXCLUDED_PATHS+=("/sys")
  EXCLUDED_PATHS+=("/tmp")
  EXCLUDED_PATHS+=("/dev")
  EXCLUDED_PATHS+=("/proc")
fi

# Add the main execution in first place
CURRENT_CMD=()
if [ ${#MAINEXECUTION} -gt 0 ]; then
  EXECUTIONS=("$(build_cmdline "${MAINEXECUTION[@]}")" "${EXECUTIONS[@]}")
fi

# Now manage the executions
if [ ${#EXECUTIONS[@]} -gt 0 ]; then
  for ((n=0;n<${#EXECUTIONS[@]};n=n+1)); do
    arrayze_cmd CURRENT_CMD "${EXECUTIONS[$n]}"

    # Remove the possible options to the strace command
    _CURRENT_CMD="${CURRENT_CMD[0]}"
    _CURRENT_CMD_N_PATH="${_CURRENT_CMD##*,}"
    
    p_debug "adding command ${_CURRENT_CMD_N_PATH} to analyze"
    add_command "$_CURRENT_CMD_N_PATH"
  done
fi

if [ "$TARFILE" != "" -a "$ROOTFS" == "" ]; then
  ROOTFS=$(tempdir)
  FORCEFOLDER=true
fi

[ "$ROOTFS" == "" ] && finalize 1 "you must provide a folder (--rootfs) to create the root filesystem or request a tar file (--tarfile)"

ROOTFS="$(readlink -f "$ROOTFS")"
[ "$ROOTFS" == "" ] && finalize 1 "invalid folder to create the root filesystem (the parent folder MUST exist)"

DANGER_FOLDERS="/ /etc /var /sys /proc"
for F in $DANGER_FOLDERS; do
  [ "$ROOTFS" == "$F" ] && finalize "refusing to build root filesystem in folder $ROOTFS"
done
  
[ -e "$ROOTFS" -a ! -d "$ROOTFS" ] && finalize 1 "$ROOTFS exists but it is not a folder"

if [ "$FORCEFOLDER" != "true" -a -d "$ROOTFS" ]; then
  read -p "folder for root filesystem ($ROOTFS) already exists. Are you sure to use it? (y/N) " CONFIRM
  if [ "${CONFIRM^^}" != "Y" ]; then
    finalize 1 "aborting"
  fi
fi

# Check dependencies first
verify_dependencies

p_debug "creating $ROOTFS"
mkdir -p "$ROOTFS"

p_info "copying forced paths"

for ((n=0;n<${#INCLUDED_PATHS[@]};n=n+1)); do
  copy "${INCLUDED_PATHS[$n]}"
done

if is_plugin_active "strace"; then
  for ((n=0;n<${#EXECUTIONS[@]};n=n+1)); do
    STRACE_command "${EXECUTIONS[$n]}"
  done
fi

p_info "analyzing..."

i_current=0
while [ $i_current -lt ${#COMMANDS_TO_ADD[@]} ]; do
  CURRENT_CMD="${COMMANDS_TO_ADD[$i_current]}"
  for p in $(PLUGIN_funcs); do
    if is_plugin_active "${p##*_}"; then
      p_debug "invoking plugin ${p##*_}"
      _C_PLUGIN="${p##*_}"
      set_logger "${_C_PLUGIN^^}"
      if ! $p "$CURRENT_CMD"; then
        break
      fi
    fi
  done
  set_logger
  i_current=$(($i_current+1))
done

if [ "$LDCONFIGFILE" != "" -a -e "$ROOTFS/$LDCONFIGFILE" ]; then
  p_debug "creating ldconfig"
  TMPFILE=$(tempfile)
  awk '!a[$0]++' "$ROOTFS/$LDCONFIGFILE" > "$TMPFILE"
  mv "$TMPFILE" "$ROOTFS/$LDCONFIGFILE"
  ldconfig -r "$ROOTFS"
  p_out "ldconfig recreated"
fi

if [ "$TARFILE" != "" ]; then
  if [ "$TARFILE" != "-" ]; then
    p_info "producing tar file $TARFILE"
    tar cf "$TARFILE" -C "$ROOTFS" .
  else
    tar c -C "$ROOTFS" .
  fi
fi